// Generated by CoffeeScript 1.3.3
(function() {
  var KreditCardInput,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  KreditCardInput = (function() {

    function KreditCardInput(sel, options) {
      var initialCardNumber, prod, shortName,
        _this = this;
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.product = void 0;
      this.issuer = void 0;
      this.containerEl = $(sel);
      this.containerEl.addClass('js-enabled');
      this.cardSurfaceEl = this.containerEl.find('.card');
      this.faceFrontEl = this.containerEl.find('.face.front');
      this.faceBackEl = this.containerEl.find('.face.back');
      this.fieldEls = {
        number: this.containerEl.find('.cc-number.value'),
        exp: this.containerEl.find('.cc-exp.value'),
        name: this.containerEl.find('.cc-name.value'),
        cvc: this.containerEl.find('.cc-cvc.value')
      };
      if (shortName = this.containerEl.find('#cc-type-choice :selected').attr('value')) {
        prod = getProductByShortname(shortName);
        this.setProduct(prod);
      } else if (initialCardNumber = this.fieldEls.number.val()) {
        prod = getProductByNumber(initialCardNumber);
        this.setProduct(prod);
      } else {
        this.setProduct();
      }
      this.fieldEls.number.bind('keyup', function() {
        return _this.setNumber(_this.fieldEls.number.val());
      });
    }

    KreditCardInput.prototype.flip = function() {
      return this.cardSurfaceEl.toggleClass('flip');
    };

    KreditCardInput.prototype.setNumber = function(num) {
      var matchedIssuer, matchedProduct;
      this.fieldEls.number.val(num);
      matchedProduct = this.getProductByNumber(num);
      if (matchedProduct !== this.product) {
        this.setProduct(matchedProduct);
      }
      matchedIssuer = this.getIssuerByNumber(num);
      if (matchedIssuer !== this.issuer) {
        return this.setIssuer(matchedIssuer || {});
      }
    };

    KreditCardInput.prototype.setIssuer = function(issuer) {
      var _this = this;
      this.containerEl.removeClass(function(index, css) {
        return (css.match(/\bissuer-\S+/g) || []).join(' ');
      });
      if (issuer.issuerShortname != null) {
        this.containerEl.addClass("issuer-" + issuer.issuerShortname);
      }
      return this.issuer = issuer;
    };

    /*
      Set the product. Ensures visibility of generic fields if product is 
      undefined -- otherwise, hides generic fields and replaces them with product-
      specific ones. The product-specific fields update the underlying generic 
      fields as they are changed, ensuring smooth form submission.
    */


    KreditCardInput.prototype.setProduct = function(prod) {
      var char, charWhitelist, currentLength, expGroups, formatParticles, i, input, last_group, length, numberGroups, sep, start_i, _i, _j, _len, _len1, _ref,
        _this = this;
      this.containerEl.removeClass(function(index, css) {
        return (css.match(/\bproduct-\S+/g) || []).join(' ');
      });
      if (prod == null) {
        this.containerEl.addClass('product-generic');
        this.containerEl.find('.product-specific').remove();
        this.product = prod;
        this.fieldEls.number.caretToEnd();
        return;
      }
      this.containerEl.addClass("product-" + prod.companyShortname);
      this.fieldNumberEl = $('<fieldset>').addClass('field cc-number product-specific');
      start_i = 0;
      last_group = null;
      _ref = prod.cardNumberGrouping;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        length = _ref[i];
        input = $('<input>').attr({
          type: 'text',
          placeholder: new Array(length + 1).join('X'),
          maxlength: length,
          size: length,
          name: 'cc_number_segment',
          "class": 'cc-number-group'
        });
        if (!(this.fieldEls.number.val().length < start_i)) {
          input.attr('value', this.fieldEls.number.val().substr(start_i, start_i + length));
          last_group = input;
        }
        start_i += length;
        this.fieldNumberEl.append(input);
      }
      numberGroups = this.fieldNumberEl.find('input');
      numberGroups.autotab_magic().autotab_filter('numeric');
      numberGroups.bind('keyup', function(e) {
        var value;
        value = "";
        _this.fieldNumberEl.find('input').each(function(i, ele) {
          return value += $(ele).val();
        });
        return _this.setNumber(value);
      });
      this.faceFrontEl.prepend(this.fieldNumberEl);
      last_group.caretToEnd();
      this.fieldExpEl = $('<fieldset>').addClass('field cc-exp product-specific');
      currentLength = 0;
      formatParticles = prod.expirationFormat.split('');
      charWhitelist = ['M', 'D', 'Y'];
      for (i = _j = 0, _len1 = formatParticles.length; _j < _len1; i = ++_j) {
        char = formatParticles[i];
        currentLength++;
        if (formatParticles[i + 1] !== char) {
          if (__indexOf.call(charWhitelist, char) >= 0) {
            input = $('<input>').attr({
              type: 'text',
              placeholder: new Array(currentLength + 1).join(char),
              maxlength: currentLength,
              size: currentLength,
              name: 'cc_exp_' + char.toLowerCase(),
              "class": 'cc-exp-group'
            });
            this.fieldExpEl.append(input);
          } else {
            sep = $('<span class="separator">' + char + '</span>');
            this.fieldExpEl.append(sep);
          }
          currentLength = 0;
        }
      }
      expGroups = this.fieldExpEl.find('input');
      expGroups.autotab_magic().autotab_filter('numeric');
      expGroups.bind('keyup', function(e) {
        var value;
        value = "";
        return _this.fieldExpEl.find('input').each(function(i, ele) {
          return value += $(ele).val();
        });
      });
      this.faceFrontEl.prepend(this.fieldExpEl);
      return this.product = prod;
    };

    KreditCardInput.prototype.getProductByNumber = function(num) {
      var d, m, matcher, parts;
      for (m in CCProducts) {
        d = CCProducts[m];
        parts = m.split('/');
        matcher = new RegExp(parts[1], parts[2]);
        if (matcher.test(num)) {
          return d;
        }
      }
      return void 0;
    };

    KreditCardInput.prototype.getIssuerByNumber = function(num) {
      var d, m, matcher, parts;
      for (m in CCIssuers) {
        d = CCIssuers[m];
        parts = m.split('/');
        matcher = new RegExp(parts[1], parts[2]);
        if (matcher.test(num)) {
          return d;
        }
      }
      return void 0;
    };

    KreditCardInput.prototype.getProductByShortname = function(name) {
      return console.log("Not yet implemented.");
    };

    KreditCardInput.prototype.isValidLuhn = function(identifier) {
      var alt, i, num, sum, _i, _ref;
      sum = 0;
      alt = false;
      for (i = _i = _ref = identifier.length - 1; _i >= 0; i = _i += -1) {
        num = parseInt(identifier.charAt(i), 10);
        if (isNaN(num)) {
          return false;
        }
        if (alt) {
          num *= 2;
          if (num > 9) {
            num = (num % 10) + 1;
          }
        }
        alt = !alt;
        sum += num;
      }
      return sum % 10 === 0;
    };

    /*
      Check if the information on the front of the card is valid
      * validate the credit card number against the Luhn algo
      * validate the date
      * validate the name
      # optionally validate the CVC if it's on the front
    */


    KreditCardInput.prototype.isFrontValid = function() {
      var valid;
      valid = true;
      valid &= this.isValidLuhn(this.fieldEls.number.val());
      valid &= this.fieldEls.exp.val().length > 0;
      valid &= this.fieldEls.name.val().length > 0;
      return valid;
    };

    return KreditCardInput;

  })();

  window.KreditCardInput = KreditCardInput;

}).call(this);
